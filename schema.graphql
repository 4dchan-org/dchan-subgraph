type _Schema_
  @fulltext(
    name: "postSearch",
    language: en,
    algorithm: rank,
    include: [
      {
        entity: "Post",
        fields: [
          { name: "comment" },
          { name: "name" }
        ]
      }
    ]
  )
  @fulltext(
    name: "boardSearch",
    language: en,
    algorithm: rank,
    include: [
      {
        entity: "Board",
        fields: [
          { name: "title" }
        ]
      }
    ]
  )

type Board @entity {
  id: ID!
  title: String!
  postCount: BigInt!
  threadCount: BigInt!
  name: String!
  score: BigInt!
  isNsfw: Boolean!
  isLocked: Boolean!
  createdBy: User!
  createdAtBlock: Block!
  createdAt: BigInt!
  lastBumpedAtBlock: Block!
  lastBumpedAt: BigInt!
  jannies: [BoardJanny!]! @derivedFrom(field: "board")
  threads: [Thread]! @derivedFrom(field: "board")
}

type BoardCreationEvent @entity {
  id: ID!
  board: Board
  user: User!
}

type Thread @entity {
  id: ID!
  board: Board
  isPinned: Boolean!
  isLocked: Boolean!
  op: Post
  n: BigInt!
  subject: String!
  replies: [Post]! @derivedFrom(field: "thread")
  replyCount: BigInt!
  imageCount: BigInt!
  createdAtBlock: Block!
  createdAt: BigInt!
  lastBumpedAtBlock: Block!
  lastBumpedAt: BigInt!
  score: BigInt!
  from: User!
}

type ThreadCreationEvent @entity {
  id: ID!
  thread: Thread
  user: User!
}

type Post @entity {
  id: ID!
  thread: Thread
  board: Board
  n: BigInt!
  name: String
  from: User!
  comment: String!
  image: Image
  createdAtBlock: Block!
  createdAt: BigInt!
  bans: [PostBan!]! @derivedFrom(field: "post")
  score: BigInt!
  sage: Boolean!
}

type PostCreationEvent @entity {
  id: ID!
  post: Post
  user: User!
}

type Report @entity {
  id: ID!
  createdAtBlock: Block!
  createdAt: BigInt!
  reason: String!
  from: User!
}

type PostReport @entity {
  id: ID!
  post: Post
  report: Report!
}

type BoardReport @entity {
  id: ID!
  board: Board
  report: Report!
}

type Ban @entity {
  id: ID!
  user: User!
  issuedAtBlock: Block!
  issuedAt: BigInt!
  expiresAt: BigInt!
  reason: String!
  from: User!
}

type UserBan @entity {
  id: ID!
  user: User!
  ban: Ban!
}

type BoardBan @entity {
  id: ID!
  user: User!
  board: Board
  ban: Ban!
}

type PostBan @entity {
  id: ID!
  user: User!
  post: Post
  ban: Ban!
}

type User @entity {
  id: ID!
  address: String!
  lastPostedAtBlock: Block
  bans: [Ban!]! @derivedFrom(field: "user")
  jannies: [BoardJanny!]! @derivedFrom(field: "user")
  score: BigInt!
}

type Admin @entity {
  id: ID!
  grantedAtBlock: Block!
  grantedAt: BigInt!
}

type BoardJanny @entity {
  id: ID!
  user: User!
  board: Board
  grantedAtBlock: Block!
  grantedAt: BigInt!
}

type Image @entity {
  id: ID!
  name: String!
  byteSize: BigInt!
  ipfsHash: String!
  isNsfw: Boolean!
  isSpoiler: Boolean!
  score: BigInt!
}

type ChanStatus @entity {
  id: ID!
  isLocked: Boolean!
}

type Block @entity {
  id: ID!
  timestamp: BigInt!
  number: BigInt!
}

type Client @entity {
  id: ID!
  version: String!
  channel: String!
  ipfsHash: String!
  publishedAtBlock: Block!
  publishedAt: BigInt!
}