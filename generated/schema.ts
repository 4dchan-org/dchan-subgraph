// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Board extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Board entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Board must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Board", id.toString(), this);
    }
  }

  static load(id: string): Board | null {
    return changetype<Board | null>(store.get("Board", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get title(): string {
    let value = this.get("title");
    return value!.toString();
  }

  set title(value: string) {
    this.set("title", Value.fromString(value));
  }

  get postCount(): BigInt {
    let value = this.get("postCount");
    return value!.toBigInt();
  }

  set postCount(value: BigInt) {
    this.set("postCount", Value.fromBigInt(value));
  }

  get threadCount(): BigInt {
    let value = this.get("threadCount");
    return value!.toBigInt();
  }

  set threadCount(value: BigInt) {
    this.set("threadCount", Value.fromBigInt(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get isNsfw(): boolean {
    let value = this.get("isNsfw");
    return value!.toBoolean();
  }

  set isNsfw(value: boolean) {
    this.set("isNsfw", Value.fromBoolean(value));
  }

  get isLocked(): boolean {
    let value = this.get("isLocked");
    return value!.toBoolean();
  }

  set isLocked(value: boolean) {
    this.set("isLocked", Value.fromBoolean(value));
  }

  get createdBy(): string {
    let value = this.get("createdBy");
    return value!.toString();
  }

  set createdBy(value: string) {
    this.set("createdBy", Value.fromString(value));
  }

  get createdAtBlock(): string {
    let value = this.get("createdAtBlock");
    return value!.toString();
  }

  set createdAtBlock(value: string) {
    this.set("createdAtBlock", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get lastBumpedAtBlock(): string {
    let value = this.get("lastBumpedAtBlock");
    return value!.toString();
  }

  set lastBumpedAtBlock(value: string) {
    this.set("lastBumpedAtBlock", Value.fromString(value));
  }

  get lastBumpedAt(): BigInt {
    let value = this.get("lastBumpedAt");
    return value!.toBigInt();
  }

  set lastBumpedAt(value: BigInt) {
    this.set("lastBumpedAt", Value.fromBigInt(value));
  }

  get jannies(): Array<string> {
    let value = this.get("jannies");
    return value!.toStringArray();
  }

  set jannies(value: Array<string>) {
    this.set("jannies", Value.fromStringArray(value));
  }

  get threads(): Array<string> {
    let value = this.get("threads");
    return value!.toStringArray();
  }

  set threads(value: Array<string>) {
    this.set("threads", Value.fromStringArray(value));
  }

  get threadLifetime(): BigInt | null {
    let value = this.get("threadLifetime");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set threadLifetime(value: BigInt | null) {
    if (!value) {
      this.unset("threadLifetime");
    } else {
      this.set("threadLifetime", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class Thread extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Thread entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Thread must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Thread", id.toString(), this);
    }
  }

  static load(id: string): Thread | null {
    return changetype<Thread | null>(store.get("Thread", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }

  get isPinned(): boolean {
    let value = this.get("isPinned");
    return value!.toBoolean();
  }

  set isPinned(value: boolean) {
    this.set("isPinned", Value.fromBoolean(value));
  }

  get isLocked(): boolean {
    let value = this.get("isLocked");
    return value!.toBoolean();
  }

  set isLocked(value: boolean) {
    this.set("isLocked", Value.fromBoolean(value));
  }

  get op(): string | null {
    let value = this.get("op");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set op(value: string | null) {
    if (!value) {
      this.unset("op");
    } else {
      this.set("op", Value.fromString(<string>value));
    }
  }

  get n(): BigInt {
    let value = this.get("n");
    return value!.toBigInt();
  }

  set n(value: BigInt) {
    this.set("n", Value.fromBigInt(value));
  }

  get subject(): string | null {
    let value = this.get("subject");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set subject(value: string | null) {
    if (!value) {
      this.unset("subject");
    } else {
      this.set("subject", Value.fromString(<string>value));
    }
  }

  get replies(): Array<string> {
    let value = this.get("replies");
    return value!.toStringArray();
  }

  set replies(value: Array<string>) {
    this.set("replies", Value.fromStringArray(value));
  }

  get replyCount(): BigInt {
    let value = this.get("replyCount");
    return value!.toBigInt();
  }

  set replyCount(value: BigInt) {
    this.set("replyCount", Value.fromBigInt(value));
  }

  get imageCount(): BigInt {
    let value = this.get("imageCount");
    return value!.toBigInt();
  }

  set imageCount(value: BigInt) {
    this.set("imageCount", Value.fromBigInt(value));
  }

  get createdAtBlock(): string {
    let value = this.get("createdAtBlock");
    return value!.toString();
  }

  set createdAtBlock(value: string) {
    this.set("createdAtBlock", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get lastBumpedAtBlock(): string {
    let value = this.get("lastBumpedAtBlock");
    return value!.toString();
  }

  set lastBumpedAtBlock(value: string) {
    this.set("lastBumpedAtBlock", Value.fromString(value));
  }

  get lastBumpedAt(): BigInt {
    let value = this.get("lastBumpedAt");
    return value!.toBigInt();
  }

  set lastBumpedAt(value: BigInt) {
    this.set("lastBumpedAt", Value.fromBigInt(value));
  }

  get archivedAt(): BigInt | null {
    let value = this.get("archivedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set archivedAt(value: BigInt | null) {
    if (!value) {
      this.unset("archivedAt");
    } else {
      this.set("archivedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get ppm(): BigInt {
    let value = this.get("ppm");
    return value!.toBigInt();
  }

  set ppm(value: BigInt) {
    this.set("ppm", Value.fromBigInt(value));
  }

  get popularity(): BigInt {
    let value = this.get("popularity");
    return value!.toBigInt();
  }

  set popularity(value: BigInt) {
    this.set("popularity", Value.fromBigInt(value));
  }
}

export class Post extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Post entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Post must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Post", id.toString(), this);
    }
  }

  static load(id: string): Post | null {
    return changetype<Post | null>(store.get("Post", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get thread(): string | null {
    let value = this.get("thread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set thread(value: string | null) {
    if (!value) {
      this.unset("thread");
    } else {
      this.set("thread", Value.fromString(<string>value));
    }
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }

  get n(): BigInt {
    let value = this.get("n");
    return value!.toBigInt();
  }

  set n(value: BigInt) {
    this.set("n", Value.fromBigInt(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (!value) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(<string>value));
    }
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }

  get comment(): string {
    let value = this.get("comment");
    return value!.toString();
  }

  set comment(value: string) {
    this.set("comment", Value.fromString(value));
  }

  get image(): string | null {
    let value = this.get("image");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set image(value: string | null) {
    if (!value) {
      this.unset("image");
    } else {
      this.set("image", Value.fromString(<string>value));
    }
  }

  get createdAtBlock(): string {
    let value = this.get("createdAtBlock");
    return value!.toString();
  }

  set createdAtBlock(value: string) {
    this.set("createdAtBlock", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get bans(): Array<string> {
    let value = this.get("bans");
    return value!.toStringArray();
  }

  set bans(value: Array<string>) {
    this.set("bans", Value.fromStringArray(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }

  get sage(): boolean {
    let value = this.get("sage");
    return value!.toBoolean();
  }

  set sage(value: boolean) {
    this.set("sage", Value.fromBoolean(value));
  }
}

export class Report extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Report entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Report must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Report", id.toString(), this);
    }
  }

  static load(id: string): Report | null {
    return changetype<Report | null>(store.get("Report", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get createdAtBlock(): string {
    let value = this.get("createdAtBlock");
    return value!.toString();
  }

  set createdAtBlock(value: string) {
    this.set("createdAtBlock", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value!.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }

  get reason(): string {
    let value = this.get("reason");
    return value!.toString();
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }
}

export class PostReport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostReport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostReport must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostReport", id.toString(), this);
    }
  }

  static load(id: string): PostReport | null {
    return changetype<PostReport | null>(store.get("PostReport", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get post(): string | null {
    let value = this.get("post");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set post(value: string | null) {
    if (!value) {
      this.unset("post");
    } else {
      this.set("post", Value.fromString(<string>value));
    }
  }

  get report(): string {
    let value = this.get("report");
    return value!.toString();
  }

  set report(value: string) {
    this.set("report", Value.fromString(value));
  }
}

export class BoardReport extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BoardReport entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BoardReport must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BoardReport", id.toString(), this);
    }
  }

  static load(id: string): BoardReport | null {
    return changetype<BoardReport | null>(store.get("BoardReport", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }

  get report(): string {
    let value = this.get("report");
    return value!.toString();
  }

  set report(value: string) {
    this.set("report", Value.fromString(value));
  }
}

export class Ban extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Ban entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Ban must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Ban", id.toString(), this);
    }
  }

  static load(id: string): Ban | null {
    return changetype<Ban | null>(store.get("Ban", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get issuedAtBlock(): string {
    let value = this.get("issuedAtBlock");
    return value!.toString();
  }

  set issuedAtBlock(value: string) {
    this.set("issuedAtBlock", Value.fromString(value));
  }

  get issuedAt(): BigInt {
    let value = this.get("issuedAt");
    return value!.toBigInt();
  }

  set issuedAt(value: BigInt) {
    this.set("issuedAt", Value.fromBigInt(value));
  }

  get expiresAt(): BigInt {
    let value = this.get("expiresAt");
    return value!.toBigInt();
  }

  set expiresAt(value: BigInt) {
    this.set("expiresAt", Value.fromBigInt(value));
  }

  get reason(): string {
    let value = this.get("reason");
    return value!.toString();
  }

  set reason(value: string) {
    this.set("reason", Value.fromString(value));
  }

  get from(): string {
    let value = this.get("from");
    return value!.toString();
  }

  set from(value: string) {
    this.set("from", Value.fromString(value));
  }
}

export class UserBan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserBan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserBan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserBan", id.toString(), this);
    }
  }

  static load(id: string): UserBan | null {
    return changetype<UserBan | null>(store.get("UserBan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get ban(): string {
    let value = this.get("ban");
    return value!.toString();
  }

  set ban(value: string) {
    this.set("ban", Value.fromString(value));
  }
}

export class BoardBan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BoardBan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BoardBan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BoardBan", id.toString(), this);
    }
  }

  static load(id: string): BoardBan | null {
    return changetype<BoardBan | null>(store.get("BoardBan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }

  get ban(): string {
    let value = this.get("ban");
    return value!.toString();
  }

  set ban(value: string) {
    this.set("ban", Value.fromString(value));
  }
}

export class PostBan extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostBan entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostBan must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostBan", id.toString(), this);
    }
  }

  static load(id: string): PostBan | null {
    return changetype<PostBan | null>(store.get("PostBan", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get post(): string | null {
    let value = this.get("post");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set post(value: string | null) {
    if (!value) {
      this.unset("post");
    } else {
      this.set("post", Value.fromString(<string>value));
    }
  }

  get ban(): string {
    let value = this.get("ban");
    return value!.toString();
  }

  set ban(value: string) {
    this.set("ban", Value.fromString(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get b58id(): string {
    let value = this.get("b58id");
    return value!.toString();
  }

  set b58id(value: string) {
    this.set("b58id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    return value!.toString();
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get lastPostedAtBlock(): string | null {
    let value = this.get("lastPostedAtBlock");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set lastPostedAtBlock(value: string | null) {
    if (!value) {
      this.unset("lastPostedAtBlock");
    } else {
      this.set("lastPostedAtBlock", Value.fromString(<string>value));
    }
  }

  get bans(): Array<string> {
    let value = this.get("bans");
    return value!.toStringArray();
  }

  set bans(value: Array<string>) {
    this.set("bans", Value.fromStringArray(value));
  }

  get jannies(): Array<string> {
    let value = this.get("jannies");
    return value!.toStringArray();
  }

  set jannies(value: Array<string>) {
    this.set("jannies", Value.fromStringArray(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }
}

export class Admin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Admin entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Admin must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Admin", id.toString(), this);
    }
  }

  static load(id: string): Admin | null {
    return changetype<Admin | null>(store.get("Admin", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get grantedAtBlock(): string {
    let value = this.get("grantedAtBlock");
    return value!.toString();
  }

  set grantedAtBlock(value: string) {
    this.set("grantedAtBlock", Value.fromString(value));
  }

  get grantedAt(): BigInt {
    let value = this.get("grantedAt");
    return value!.toBigInt();
  }

  set grantedAt(value: BigInt) {
    this.set("grantedAt", Value.fromBigInt(value));
  }
}

export class BoardJanny extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BoardJanny entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BoardJanny must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BoardJanny", id.toString(), this);
    }
  }

  static load(id: string): BoardJanny | null {
    return changetype<BoardJanny | null>(store.get("BoardJanny", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }

  get grantedAtBlock(): string {
    let value = this.get("grantedAtBlock");
    return value!.toString();
  }

  set grantedAtBlock(value: string) {
    this.set("grantedAtBlock", Value.fromString(value));
  }

  get grantedAt(): BigInt {
    let value = this.get("grantedAt");
    return value!.toBigInt();
  }

  set grantedAt(value: BigInt) {
    this.set("grantedAt", Value.fromBigInt(value));
  }
}

export class Image extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Image entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Image must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Image", id.toString(), this);
    }
  }

  static load(id: string): Image | null {
    return changetype<Image | null>(store.get("Image", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value!.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get isNsfw(): boolean {
    let value = this.get("isNsfw");
    return value!.toBoolean();
  }

  set isNsfw(value: boolean) {
    this.set("isNsfw", Value.fromBoolean(value));
  }

  get isSpoiler(): boolean {
    let value = this.get("isSpoiler");
    return value!.toBoolean();
  }

  set isSpoiler(value: boolean) {
    this.set("isSpoiler", Value.fromBoolean(value));
  }

  get score(): BigInt {
    let value = this.get("score");
    return value!.toBigInt();
  }

  set score(value: BigInt) {
    this.set("score", Value.fromBigInt(value));
  }
}

export class ChanStatus extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ChanStatus entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ChanStatus must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ChanStatus", id.toString(), this);
    }
  }

  static load(id: string): ChanStatus | null {
    return changetype<ChanStatus | null>(store.get("ChanStatus", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get isLocked(): boolean {
    let value = this.get("isLocked");
    return value!.toBoolean();
  }

  set isLocked(value: boolean) {
    this.set("isLocked", Value.fromBoolean(value));
  }
}

export class Block extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Block entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Block must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Block", id.toString(), this);
    }
  }

  static load(id: string): Block | null {
    return changetype<Block | null>(store.get("Block", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value!.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get number(): BigInt {
    let value = this.get("number");
    return value!.toBigInt();
  }

  set number(value: BigInt) {
    this.set("number", Value.fromBigInt(value));
  }
}

export class Client extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Client entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Client must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Client", id.toString(), this);
    }
  }

  static load(id: string): Client | null {
    return changetype<Client | null>(store.get("Client", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get version(): string {
    let value = this.get("version");
    return value!.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get channel(): string {
    let value = this.get("channel");
    return value!.toString();
  }

  set channel(value: string) {
    this.set("channel", Value.fromString(value));
  }

  get ipfsHash(): string {
    let value = this.get("ipfsHash");
    return value!.toString();
  }

  set ipfsHash(value: string) {
    this.set("ipfsHash", Value.fromString(value));
  }

  get publishedAtBlock(): string {
    let value = this.get("publishedAtBlock");
    return value!.toString();
  }

  set publishedAtBlock(value: string) {
    this.set("publishedAtBlock", Value.fromString(value));
  }

  get publishedAt(): BigInt {
    let value = this.get("publishedAt");
    return value!.toBigInt();
  }

  set publishedAt(value: BigInt) {
    this.set("publishedAt", Value.fromBigInt(value));
  }
}

export class UserTx extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserTx entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserTx must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserTx", id.toString(), this);
    }
  }

  static load(id: string): UserTx | null {
    return changetype<UserTx | null>(store.get("UserTx", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string {
    let value = this.get("user");
    return value!.toString();
  }

  set user(value: string) {
    this.set("user", Value.fromString(value));
  }

  get success(): boolean {
    let value = this.get("success");
    return value!.toBoolean();
  }

  set success(value: boolean) {
    this.set("success", Value.fromBoolean(value));
  }

  get error(): string | null {
    let value = this.get("error");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set error(value: string | null) {
    if (!value) {
      this.unset("error");
    } else {
      this.set("error", Value.fromString(<string>value));
    }
  }
}

export class ThreadRef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ThreadRef entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ThreadRef must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ThreadRef", id.toString(), this);
    }
  }

  static load(id: string): ThreadRef | null {
    return changetype<ThreadRef | null>(store.get("ThreadRef", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get thread(): string | null {
    let value = this.get("thread");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set thread(value: string | null) {
    if (!value) {
      this.unset("thread");
    } else {
      this.set("thread", Value.fromString(<string>value));
    }
  }
}

export class BoardRef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BoardRef entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type BoardRef must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("BoardRef", id.toString(), this);
    }
  }

  static load(id: string): BoardRef | null {
    return changetype<BoardRef | null>(store.get("BoardRef", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get board(): string | null {
    let value = this.get("board");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set board(value: string | null) {
    if (!value) {
      this.unset("board");
    } else {
      this.set("board", Value.fromString(<string>value));
    }
  }
}

export class PostRef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save PostRef entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type PostRef must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("PostRef", id.toString(), this);
    }
  }

  static load(id: string): PostRef | null {
    return changetype<PostRef | null>(store.get("PostRef", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get post(): string | null {
    let value = this.get("post");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set post(value: string | null) {
    if (!value) {
      this.unset("post");
    } else {
      this.set("post", Value.fromString(<string>value));
    }
  }
}

export class UserRef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserRef entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type UserRef must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("UserRef", id.toString(), this);
    }
  }

  static load(id: string): UserRef | null {
    return changetype<UserRef | null>(store.get("UserRef", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get user(): string | null {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set user(value: string | null) {
    if (!value) {
      this.unset("user");
    } else {
      this.set("user", Value.fromString(<string>value));
    }
  }
}
